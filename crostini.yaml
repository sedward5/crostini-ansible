---
- hosts: 127.0.0.1
  connection: local
  tasks:

  - name: Check if Aptitude is installed
    stat:
      path: /usr/bin/aptitude
    register: stat_result

  - name: Aptitude is required
    command: apt-get -y install aptitude
    when: stat_result.stat.exists == False

  - name: Add gcloud repo
    lineinfile:
      dest: /etc/apt/sources.list.d/google-cloud-sdk.list
      line: 'deb http://packages.cloud.google.com/apt cloud-sdk-stretch main'
      create: yes

  - name: Add gcloud repo key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg 

  - name: Update apt cache and upgrade packages
    apt:
      upgrade: yes
      update_cache: yes

  - name: Install packages
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - bash-completion
      - binutils
      - dnsutils
      - google-cloud-sdk
      - hping3
      - htop
      - inetutils-ping
      - jq
      - nmap
      - python-pip
      - python3-pip
      - telnet
      - thefuck
      - tree
      - tmux
      - vim-nox
      - virtualenv
      - whois
      - yara
        
  - name: Install AWS CLI
    pip:
      name: 
        - awscli
        - powerline-status

  - name: Install VSCode
    apt:
      deb: https://go.microsoft.com/fwlink/?LinkID=760868

  - name: Clone YaraRules
    git:
      repo: https://github.com/Yara-Rules/rules.git
      dest: /opt/yara

  - name: Clone .tmux
    git:
      repo: https://github.com/gpakosz/.tmux.git
      dest: /opt/tmux

  - name: Get latest release of code-server
    uri:
      url: https://api.github.com/repos/cdr/code-server/releases/latest
    register: releases

  - name: Find the latest linux version download url
    set_fact:
      releases: "{{ releases.json.assets | selectattr('name', 'match', '.*-linux') | list }}"

  - name: Download code-server
    get_url:                   
      url: "{{ releases[0].browser_download_url }}"
      dest: /opt/code-server-latest.tar.gz 

  - name: Unarchive tarball
    unarchive:
      src: /opt/code-server-latest.tar.gz
      dest: /opt/

  - name: Find code-server binary
    find:
      recurse: yes
      paths: /opt/
      pattern: 'code-server'
      file_type: file
    register: code

  - name: Copy code-server to /opt
    copy:
      src: "{{ code.files[0].path }}"
      dest: /opt/
      mode: '0755'

  - name: find home directories
    find:
      paths: /home
      file_type: directory
    register: home_directories

  - name: Copy .tmux files
    copy:
      src: "/opt/tmux/{{ item[0] }}"
      dest: "{{ item[1].path }}"
    with_nested:
      - [ '.tmux.conf', '.tmux.conf.local']
      - "{{ home_directories.files }}"

  - name: Write a file like my vimrc
    blockinfile:
      dest: "{{ item.path }}/.vimrc"
      create: yes
      marker: "\" {mark} ANSIBLE MANAGED BLOCK"
      block: |
        set nomodeline
        syntax enable
        colorscheme slate
        set  rtp+=/usr/local/lib/python2.7/dist-packages/powerline/bindings/vim/
        set laststatus=2
        set t_Co=256
    with_items: "{{ home_directories.files }}"

  - name: Uncomment powerline separatetors in .tmux.conf.local
    lineinfile:
      dest: "{{ item[0].path }}/.tmux.conf.local"
      regexp: '^#?\s*{{ item[1].key }}.*$'
      line: "{{ item[1].key }}='{{ item[1].value }}'"
    with_nested:
      - "{{ home_directories.files }}"
      - - { key: 'tmux_conf_theme_left_separator_main', value: '\uE0B0' }
        - { key: 'tmux_conf_theme_left_separator_sub', value: '\uE0B1' }
        - { key: 'tmux_conf_theme_right_separator_main', value: '\uE0B2' }
        - { key: 'tmux_conf_theme_right_separator_sub', value: '\uE0B3' }

  - name: Powerline for .bashrc
    blockinfile:
      dest: "{{ item.path }}/.bashrc"
      block: |
        if [ -f `which powerline-daemon` ]; then
          powerline-daemon -q
          POWERLINE_BASH_CONTINUATION=1
          POWERLINE_BASH_SELECT=1
          . /usr/local/lib/python2.7/dist-packages/powerline/bindings/bash/powerline.sh
        fi
        alias code-server="echo 'Click here http://penguin.linux.test:8080';/opt/code-server -H -p 8080"
        eval $(thefuck --alias)
    with_items: "{{ home_directories.files }}"
